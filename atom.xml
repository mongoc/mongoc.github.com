<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>透过问题看本质</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mongoc.com/"/>
  <updated>2016-12-26T08:55:09.000Z</updated>
  <id>http://mongoc.com/</id>
  
  <author>
    <name>MongoC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数组去重的16种写法-下</title>
    <link href="http://mongoc.com/2016/12/26/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%8416%E7%A7%8D%E5%86%99%E6%B3%95-%E4%B8%8B/"/>
    <id>http://mongoc.com/2016/12/26/JS数组去重的16种写法-下/</id>
    <published>2016-12-26T08:21:08.000Z</published>
    <updated>2016-12-26T08:55:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇介绍了JS数组去重的16种写法，虽然只有14种。这里接着上篇记录下每种写法所消耗的时间。分析下那种方法是合适的。</p>
<p>这里从网上下载了一本英文小说，从里面复制了一段处理之后，数组的长度是22442。这就是我们的测试数据。</p>
<a id="more"></a>
<hr>
<p>运行环境: <code>Mac pro, OS10.11.6, nodejs4.4.5, 2.4 GHz Intel Core i5, 8 GB 1600 MHz DDR3, 2核</code></p>
<p>首先贴出所有的测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line">//1</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = [];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    if (res.indexOf(arr[i]) == -1) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:106</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//2</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = [];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    var isExist = false;</div><div class="line">    for (var j = i + 1; j &lt; arr.length; j++) &#123;</div><div class="line">        if (arr[i] == arr[j]) &#123;</div><div class="line">            isExist = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!isExist) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:616</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//3</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var res = [arr[0]];</div><div class="line">var st = (new Date()).getTime();</div><div class="line">for (var i = 1; i &lt; arr.length; i++) &#123;</div><div class="line">    if (arr.indexOf(arr[i]) == i) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:284</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//4</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var tmp = &#123;&#125;;</div><div class="line">for (var m in arr) &#123;</div><div class="line">    tmp[arr[m]] = 1;</div><div class="line">&#125;</div><div class="line">var res = [];</div><div class="line">for (var n in tmp) &#123;</div><div class="line">    res.push(n);</div><div class="line">&#125;</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:20</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//5</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">arr.sort();</div><div class="line">var res = [arr[0]];</div><div class="line">for (var i = 1; i &lt; arr.length; i++) &#123;</div><div class="line">    if (arr[i] !== res[res.length - 1]) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:16</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//6</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">arr.sort();</div><div class="line">var res = arr.filter(function(item, index) &#123;</div><div class="line">    if (item != arr[index - 1]) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;);</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:20</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//7</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var tmp = &#123;&#125;;</div><div class="line">var res = arr.filter(function(item) &#123;</div><div class="line">    return tmp.hasOwnProperty(item) ? false : (tmp[item] = true);</div><div class="line">&#125;);</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:10</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//8</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = arr.filter(function(item, pos, self) &#123;</div><div class="line">    return self.indexOf(item) == pos;</div><div class="line">&#125;);</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:340</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">// //9</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = arr.sort().filter(function(item, pos, self) &#123;</div><div class="line">    return !pos || item != self[pos - 1];</div><div class="line">&#125;)</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:19</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//10</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = Array.from(new Set(arr));</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:12</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//11</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = arr.reduce(function(a, b) &#123;</div><div class="line">    if (a.indexOf(b) &lt; 0) a.push(b);</div><div class="line">    return a;</div><div class="line">&#125;, []);</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:118</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//12</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = [...new Set(arr)];</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:12</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//13</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var uniq = arr</div><div class="line">    .map(function(name) &#123;</div><div class="line">        return &#123; count: 1, name: name &#125;</div><div class="line">    &#125;)</div><div class="line">    .reduce(function(a, b) &#123;</div><div class="line">        a[b.name] = (a[b.name] || 0) + b.count</div><div class="line">        return a</div><div class="line">    &#125;, &#123;&#125;)</div><div class="line"></div><div class="line">var res = Object.keys(uniq).sort(function(a, b) &#123;</div><div class="line">    return uniq[a] &lt; uniq[b] </div><div class="line">&#125;);</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">// arr.length: 22442</div><div class="line">// use time:20</div><div class="line">// res.length: 5602</div><div class="line"></div><div class="line"></div><div class="line">//14</div><div class="line">console.log(&apos;arr.length:&apos;,arr.length);</div><div class="line">var st = (new Date()).getTime();</div><div class="line">var res = Object.keys(arr.reduce((p, c) =&gt; (p[c] = true, p), &#123;&#125;));</div><div class="line">var et = (new Date()).getTime();</div><div class="line">console.log(&apos;use time:&apos; + (et - st));</div><div class="line">console.log(&apos;res.length:&apos;,res.length);</div><div class="line">console.log(process.memoryUsage());</div><div class="line">// arr.length: 22442</div><div class="line">// use time:9</div><div class="line">// res.length: 5602</div></pre></td></tr></table></figure></p>
<p>上面是14种方法的测试结果，其实每种结果我都是测试多次，每次的时间都会上下浮动，但是幅度都不打，贴出来的结果都是接近平均值。</p>
<p>看图表：<br><img src="/images/A64725AC-4669-4102-A08E-EA828B9FC616.png" alt=""></p>
<p>从图中我们可以一眼看出来耗时最少的是第14个，耗时仅仅9ms, 最多的是第2个616ms。</p>
<p>而且通过对比我们可以发现，耗时少的有一下几个特点：</p>
<ul>
<li>使用了sort排序</li>
<li>通过空间换时间，也就是使用到对象，具体看第4个和14.</li>
<li>使用新的api</li>
</ul>
<p>因为测试的数据不多所以只是统计了耗时并未统计内存和cpu的消耗。实际生活中的问题还是要具体对待。</p>
<p>我的建议是如果有新的api就是用最新的api，如果没有最新的api，就是用性能和消耗平衡的方式，找到中间点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇介绍了JS数组去重的16种写法，虽然只有14种。这里接着上篇记录下每种写法所消耗的时间。分析下那种方法是合适的。&lt;/p&gt;
&lt;p&gt;这里从网上下载了一本英文小说，从里面复制了一段处理之后，数组的长度是22442。这就是我们的测试数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://mongoc.com/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://mongoc.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS数组去重的16种写法-上</title>
    <link href="http://mongoc.com/2016/12/26/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%8416%E7%A7%8D%E5%86%99%E6%B3%95-%E4%B8%8A/"/>
    <id>http://mongoc.com/2016/12/26/JS数组去重的16种写法-上/</id>
    <published>2016-12-26T01:47:08.000Z</published>
    <updated>2016-12-26T08:18:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组去重，很多面试都会遇到的问题，你能写出几种？这个问题我看到的时候，我想到三种，大部分人可能都是想到三种，只是可能每个人想到的三种不太一样。我搜索了下这个问题，中文结果中，大多人的三种都是一致的，不知道是不是因为都是相互参考的。我搜索了很多资料，整理出这份16种写法文章。</p>
<p>这个篇幅里面只是记录有多少种，并不记录每种方法的性能，下一篇会分析测试每种的性能。<br><a id="more"></a></p>
<hr>
<p>运行环境: <code>Mac pro, OS10.11.6, nodejs4.4.5</code></p>
<blockquote>
<p> 这里16种写法的数组去重，整体可以分为3类：</p>
<ol>
<li>for循环辅助实现</li>
<li>数组原生方法实现</li>
<li>新api方法实现</li>
</ol>
</blockquote>
<hr>
<h4 id="for循环辅助实现"><a href="#for循环辅助实现" class="headerlink" title="for循环辅助实现"></a>for循环辅助实现</h4><p>1.第一种是大家最长想到的一种利用<code>indexOf</code>实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line"></div><div class="line">var res = [];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    if (res.indexOf(arr[i]) == -1) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此种方法利用<code>indexOf</code>判断当前项是否在新数组中存在，不存在就加入，然后返回新数组。</p>
<p>2.第二种也是很容易想到的一个，利用两次<code>for</code>循环进行对比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = [];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    var isExist = false;</div><div class="line">    for (var j = i + 1; j &lt; arr.length; j++) &#123;</div><div class="line">        if (arr[i] == arr[j]) &#123;</div><div class="line">            isExist = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!isExist) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;h&quot;,&quot;b&quot;,&quot;g&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;a&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>利用<code>for</code>循环，把数组第一项逐个和后面的一项对比是否重复，不重复加入到新的数组中，返回新数组</p>
<p>3.第三种常用的也长想到的也是利用<code>indexOf</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = [arr[0]];</div><div class="line">for (var i = 1; i &lt; arr.length; i++) &#123;</div><div class="line">    if (arr.indexOf(arr[i]) == i) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此方法是利用当前数组中第<code>i</code>项的数值在当前数组中第一次出现的位置是不是<code>i</code>，如果不是就说明重复了。加入到新数组。这个是个很讨巧的方法。</p>
<p>4.第四种利用对象的方式进行进行去重。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var tmp = &#123;&#125;;</div><div class="line">for (var m in arr) &#123;</div><div class="line">    tmp[arr[m]] = 1;</div><div class="line">&#125;</div><div class="line">var res = [];</div><div class="line">for (var n in tmp) &#123;</div><div class="line">    res.push(n);</div><div class="line">&#125;</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此方法是利用对象的同名属性会被覆盖的特点处理，把数组中的所有项都作为对象的属性名，结果都一样(这里都是1)，然后重复的属性名会被覆盖，再把所有的属性循环出来放到新数组里面既可。</p>
<p>5.先排序在再去重。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">arr.sort();</div><div class="line">var res = [arr[0]];</div><div class="line">for (var i = 1; i &lt; arr.length; i++) &#123;</div><div class="line">    if (arr[i] !== res[res.length - 1]) &#123;</div><div class="line">        res.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;bm&quot;,&quot;bx&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;git&quot;,&quot;h&quot;,&quot;o&quot;,&quot;p&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此方法和第一个道理是一样的，只是先排序了。然后从原数组的第一个开始和新数组中的结果对比，看是否存在，不存在就加到新数组中。</p>
<hr>
<h4 id="数组原生方法实现"><a href="#数组原生方法实现" class="headerlink" title="数组原生方法实现"></a>数组原生方法实现</h4><p>6.利用数组原生的<code>filter</code>方法实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">arr.sort();</div><div class="line">var res = arr.filter(function(item, index) &#123;</div><div class="line">    if (item != arr[index - 1]) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;);</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;bm&quot;,&quot;bx&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;git&quot;,&quot;h&quot;,&quot;o&quot;,&quot;p&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此方法是先排序把一致的都排在一起，然后在利用<code>filter</code>方法进行过滤，此方法返回<code>true</code>就表示返回当前项到新数组，返回<code>false</code>就表示啥都不添加到新数组。结果就是新数组。</p>
<p><strong>1-6是大家想到的最多的几种方法，也是最常见的几种方法，我本身看到这个的时候也就想到了1，2，6这三种方法。但是上面这6种方法应该都是大家看到这种问题立即就能想到的。</strong></p>
<p>7.此方法还是也是利用<code>filter</code>方法。但是它结合对象的方式真是很棒的一种思路。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var tmp = &#123;&#125;;</div><div class="line">var res = arr.filter(function(item) &#123;</div><div class="line">    return tmp.hasOwnProperty(item) ? false : (tmp[item] = true);</div><div class="line">&#125;);</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>这种方式其实是利用了第4和第6的结合，还是把项作为属性名放到对象中去把<code>true</code>作为值。也是很讨巧的方法。</p>
<p>8.这种方法还是利用<code>filter</code>,只是更简洁了，其实后面的几种都是利用了<code>filter</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = arr.filter(function(item, pos, self) &#123;</div><div class="line">    return self.indexOf(item) == pos;</div><div class="line">&#125;);</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>此方法利用数组<code>filter</code>方法的第三个参数，其实这里是否利用第三个参数完全可以说明你对此方法的理解，这里第三个参数是表面当前调用的数组，也就是这里的<code>arr</code>数组本身。他其实就是上面第3的变种。只是看起来很简洁。</p>
<p>9.此种方法也可以看做是第6种方法的变种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = arr.sort().filter(function(item, pos, self) &#123;</div><div class="line">    return !pos || item != self[pos - 1];</div><div class="line">&#125;)</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">result: [&quot;a&quot;,&quot;b&quot;,&quot;bm&quot;,&quot;bx&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;git&quot;,&quot;h&quot;,&quot;o&quot;,&quot;p&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>先排序，然后判断<code>pos</code>索引是否正常，再判断当前项是否和下一项一样，并且返回是否一样的结果。</p>
<p><strong>上面这几种filter的使用，尤其是7，8，9这三种，这三种其实很能看出一个人的基础怎样？他们充分的把基础知识提现的很完美。很简洁的代码但是却让人一眼就看明白。这需要一定的功力。</strong></p>
<hr>
<h4 id="新api方法实现"><a href="#新api方法实现" class="headerlink" title="新api方法实现"></a>新api方法实现</h4><p>10.使用新的方法<code>from</code>和<code>Set</code>实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = Array.from(new Set(arr));</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>这里其实主要是利用了<code>Set</code>。</p>
<blockquote>
<p>Set对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的。</p>
</blockquote>
<p>这里可以看出<code>Set</code>中的值都是唯一的不会重复的，这里就是先把数组转换到<code>Set</code>，因为<code>Set</code>也是个可以迭代的对象。所以在调用<code>from</code>。</p>
<blockquote>
<p>Array.from() 方法可以将一个类数组对象或可遍历对象转换成真正的数组。</p>
</blockquote>
<p>这是<code>from</code>的概述，而<code>Set</code>之后返回的就是一个可以迭代的对象，所以这里配合使用简直无敌了。</p>
<p>11.使用<code>reduce</code>方法实现去重。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = arr.reduce(function(a, b) &#123;</div><div class="line">    if (a.indexOf(b) &lt; 0) a.push(b);</div><div class="line">    return a;</div><div class="line">&#125;, []);</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>理解此方式，其实就是要理解<code>reduce</code>。<code>reduce</code>的概述如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">语法：</div><div class="line"></div><div class="line">&gt; arr.reduce(callback,[initialValue])</div><div class="line"></div><div class="line">概述：</div><div class="line"></div><div class="line">&gt; 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值</div><div class="line"></div><div class="line">参数如下：</div><div class="line"></div><div class="line">&gt; callback           执行数组中每个值的函数，包含四个参数</div><div class="line">&gt;     previousValue  上一次调用回调返回的值，或者是提供的初始值（initialValue）</div><div class="line">&gt;     currentValue   数组中当前被处理的元素</div><div class="line">&gt;     index          当前元素在数组中的索引</div><div class="line">&gt;     array          调用 reduce 的数组</div><div class="line">&gt; initialValue       作为第一次调用 callback 的第一个参数。</div></pre></td></tr></table></figure></p>
<p>这里<code>a</code>表示每次回调调用返回的结果，<code>b</code>就是要处理的项，而空数组会作为第一的<code>a</code>传入，所以每次返回的<code>a</code>都是个数组，每次调用回调就判断数组中是否存在当前项<code>b</code>是否存在就行了。</p>
<p>12.这个利用扩展语法。还是看代码吧，然后再解释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var res = [...new Set(arr)];</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure></p>
<p><em>因为我的nodejs是4.4.5，所以运行这个时需要添加<code>harmony</code>参数</em></p>
<p>扩展语法概述</p>
<blockquote>
<p> 扩展语法允许在需要多个参数（用于函数调用）或多个元素（用于数组文本）或多个变量（用于解构分配）的位置扩展表达式。</p>
</blockquote>
<p>总之就是他可以用于数组，将迭代器转换为数组，而<code>Set</code>返回的就是可一个可迭代的对象。这个其实和上面的第10是长不多的，只是看起来像是简写了。</p>
<p>13.这个方式利用了<code>map</code>，<code>reduce</code>, <code>Object.keys</code>, <code>sort</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line">var uniq = arr</div><div class="line">    .map(function(name) &#123;</div><div class="line">        return &#123; count: 1, name: name &#125;</div><div class="line">    &#125;)</div><div class="line">    .reduce(function(a, b) &#123;</div><div class="line">        a[b.name] = (a[b.name] || 0) + b.count</div><div class="line">        return a</div><div class="line">    &#125;, &#123;&#125;)</div><div class="line"></div><div class="line">var res = Object.keys(uniq).sort(function(a, b) &#123;</div><div class="line">    return uniq[a] &lt; uniq[b] </div><div class="line">&#125;);</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;h&quot;,&quot;a&quot;,&quot;o&quot;,&quot;c&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;b&quot;,&quot;d&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>先说一句，如果非要让我给这段代码一句评价，那就是<code>这个逼装的beautiful</code>，毕竟能把逼装成这样也不容易。<br>首先利用<code>map</code>把数组改成对象数组，把每个对象多加一个<code>count</code>属性用于标记出现多少次，后面利用reduce把重复的项去除累加他们的<code>count</code>。<br>在用<code>Object.keys</code>返回对象的所有属性。<br>最后利用<code>sort</code>排序时根据<code>count</code>排序。<br>不过不得不说虽然他看起来写的复杂了，但是他的速度还是没话说的。</p>
<p>这个里面利用了很多js原生的功能，虽说可以提现自己的功力，但是这逼装的有点过分。</p>
<p>14.这个算是对上面的精简了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;a&apos;, &apos;b&apos;, &apos;g&apos;, &apos;o&apos;, &apos;bm&apos;, &apos;a&apos;, &apos;p&apos;, &apos;bx&apos;, &apos;git&apos;, &apos;xb&apos;];</div><div class="line"></div><div class="line">var res = Object.keys(arr.reduce((p, c) =&gt; (p[c] = true, p), &#123;&#125;));</div><div class="line">console.log(&apos;result:&apos;, JSON.stringify(res));</div><div class="line">//result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;o&quot;,&quot;bm&quot;,&quot;p&quot;,&quot;bx&quot;,&quot;git&quot;,&quot;xb&quot;]</div></pre></td></tr></table></figure>
<p>这个就不解释了，上面几个看了之后，这个也就一眼明了了，只是添加了箭头函数而已。</p>
<hr>
<p>本着透过问题看本质的想法。我搜索和整理了上面这些内容。虽说上面的内容有一些是略微重复，但是思路还是有的。至少下次别人问你数组去重你能想到几种的时候，你告诉我他可以想到14种不同的写法。</p>
<p><strong>这次的整理和搜索的时候，也发现新的api真的是精简了太多太多的工作。而且js也越来越像个完整的语言了，虽说需要学习新版的api，但是有些地方我还是不是很喜欢的。我当时从Java到JS就是喜欢他的灵活多变的特点，结果她却越来越像Java了。</strong></p>
<p>下一篇我会整理上面这14种方法的各个性能，这里只是介绍了各种方式，毕竟搞清楚各个的性能如何才能让我们装逼程度更上一层楼。</p>
<p>对了，本来是有16种的，但是因为其中两种觉得重复的程度太高了，而我的标题又已经起好了，所以就懒得改了。或许后期我看到更好的方式我会再补上，而如果你不小心看到我的信息，也可以告诉我，我来补上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组去重，很多面试都会遇到的问题，你能写出几种？这个问题我看到的时候，我想到三种，大部分人可能都是想到三种，只是可能每个人想到的三种不太一样。我搜索了下这个问题，中文结果中，大多人的三种都是一致的，不知道是不是因为都是相互参考的。我搜索了很多资料，整理出这份16种写法文章。&lt;/p&gt;
&lt;p&gt;这个篇幅里面只是记录有多少种，并不记录每种方法的性能，下一篇会分析测试每种的性能。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://mongoc.com/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://mongoc.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>连续赋值中a.x等于几?</title>
    <link href="http://mongoc.com/2016/12/09/%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC%E4%B8%ADa-x%E7%AD%89%E4%BA%8E%E5%87%A0/"/>
    <id>http://mongoc.com/2016/12/09/连续赋值中a-x等于几/</id>
    <published>2016-12-09T08:06:56.000Z</published>
    <updated>2016-12-09T09:05:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意中看到一个有关连续赋值运算中a.x的运算结果问题，当时我看的时候我也计算错了。但是我看了作者的解释，作者也是参照了别人的结果给出的猜想。这是<a href="http://www.cnblogs.com/xxcanghai/p/4998076.html" target="_blank" rel="external">原文地址</a>，说实话我不是完全赞同作者的猜想，所以搜索了更多的资料。这里我也记录下我的理解。</p>
<a id="more"></a>
<hr>
<h4 id="看看原问题"><a href="#看看原问题" class="headerlink" title="看看原问题"></a>看看原问题</h4><p>原题是这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &#123;n:1&#125;;</div><div class="line">a.x = a = &#123;n:2&#125;;</div><div class="line">console.log(a.x); // 输出多少</div></pre></td></tr></table></figure></p>
<p>我算错了，我以为会是<code>{n:2}</code>。结果不是。这里引用下别人的理解:</p>
<blockquote>
<p>所以我认为这段代码  a.x=a={n:2};  的逻辑是：<br>1、在执行前，会先将a和a.x中的a的引用地址都取出来，此值他们都指向{n:1}<br>2、在内存中创建一个新对象{n:2}<br>3、执行a={n:2}，将a的引用从指向{n:1}改为指向新的{n:2}<br>4、执行a.x=a，此时a已经指向了新对象，而a.x因为在执行前保留了原引用，所以a.x的a依然指向原先的{n:1}对象，所以给原对象新增一个属性x，内容为{n:2}也就是现在a<br>5、语句执行结束，原对象由{n:1}变成{n:1,x:{n:2}}，而原对象因为无人再引用他，所以被GC回收，当前a指向新对象{n:2}<br>6、所以就有了文章开头的运行结果，再执行a.x，自然就是undefined了</p>
</blockquote>
<p>这里作者的的理解也都是对的，只是首先运算的顺序不对。</p>
<hr>
<h4 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h4><p>我们先看个简单的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 3;</div><div class="line">a = b = 4;</div><div class="line">console.log(a, b);     //4 4</div></pre></td></tr></table></figure></p>
<p>正常的连续赋值没有问题，正常的连续赋值，js会从右边开始运算，并且把右边的值或者表达式赋值给左边。上边的例子没有问题。</p>
<p>我们分析下原题。首先我们拆分下上面的代码(我比较喜欢这样去理解代码)，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = &#123;n:1&#125;;               </div><div class="line">var b = a;</div><div class="line">a.x = a = &#123;n:2&#125;;            </div><div class="line">console.log(a.x);            //undefined</div><div class="line">console.log(b);              //输出&#123;n:1, x:&#123;n:2&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>这里我直接打印了答案，我记录下我的猜想。</p>
<p><strong>JS中使用var声明变量如果不赋值默认是undefined。</strong><br><strong>JS中访问对象不存在的属性时会自动创建这个属性并且赋值为undefined</strong></p>
<p>首先<code>a.x = a = {n:2}</code>的执行顺序确实是从右向左，但是这个里面的有一个特殊的地方就是那个<code>.</code>，因为这个导致了运算优先级变了。变成了先执行<code>成员访问</code>运算，再执行赋值运算，所以会先执行左边的<code>a.x</code>运算。</p>
<p>这里是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">运算优先级说明</a>。这里可以看到成员访问的优先级是大于赋值运算优先级的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = &#123;n:1&#125;;               //我们把&#123;n:1&#125;认为是obj，便于理解</div><div class="line">var b = a;</div><div class="line">a.x = a = &#123;n:2&#125;;             //我们把&#123;n:2&#125;认为是obj1</div><div class="line"></div><div class="line">这里的a=&#123;n:1&#125;，也就是相当于a=obj，b=a也就是b=obj， 所以b=a=obj。</div><div class="line"></div><div class="line">第一步运算a.x并且a.x等于undefined，也就是相当于x在obj上面，即obj.x=undefined</div><div class="line">第二步运算a=&#123;n:2&#125;， 也就是相当于把a指向obj的指向改成了指向obj1</div><div class="line">第三步运算a.x=a，因为第二部的原因a执行obj已经不存在了已经是指向obj1了，那么就是在运算obj.x=obj1。</div><div class="line">第四步运算完毕</div></pre></td></tr></table></figure>
<p>这里因为a最终指向了obj1，并不指向obj，而obj1中没有x属性，那么访问a.x(obj1.x)自然也就是undefind了。而obj一直等于b，所以b就自然是{n:1,x:{n:2}}了。</p>
<p>透过问题看本质之后在理解反过来的操作也就是一样的结果了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = a.x = &#123;n:2&#125;</div><div class="line"></div><div class="line">可以尝试思考这个:</div><div class="line">var a = &#123;n:1&#125;;</div><div class="line">var c = &#123;n:3&#125;;</div><div class="line">var b = a;</div><div class="line">var d = c;</div><div class="line">console.log(a.x, c.y, a, b, c, d);  //输出结果,全选页面文字查看答案</div></pre></td></tr></table></figure></p>
<p><i style="color:#fff"><br>undefined<br>{ n: 4 }<br>{ n: 4 }<br>{ n: 1, x: { n: 4 } }<br>{ n: 3, y: { n: 4 } }<br>{ n: 3, y: { n: 4 } }</i></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天无意中看到一个有关连续赋值运算中a.x的运算结果问题，当时我看的时候我也计算错了。但是我看了作者的解释，作者也是参照了别人的结果给出的猜想。这是&lt;a href=&quot;http://www.cnblogs.com/xxcanghai/p/4998076.html&quot;&gt;原文地址&lt;/a&gt;，说实话我不是完全赞同作者的猜想，所以搜索了更多的资料。这里我也记录下我的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://mongoc.com/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://mongoc.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[1, 2, 3].map(parseInt) 答案是多少？</title>
    <link href="http://mongoc.com/2016/12/08/1-2-3-map-parseInt-%E7%AD%94%E6%A1%88%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>http://mongoc.com/2016/12/08/1-2-3-map-parseInt-答案是多少？/</id>
    <published>2016-12-08T11:17:53.000Z</published>
    <updated>2016-12-09T09:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题网络上很多人都问过，很多人也都给出解答了，搜索看了下发下很多答案都是一知半解。抱着透过问题看本质的心态仔细的看了下资料，总算是弄明白了最总的结果。并且弄明白了为什么会这样。<br><a id="more"></a></p>
<hr>
<h4 id="说说map"><a href="#说说map" class="headerlink" title="说说map"></a>说说map</h4><p>map是数组原生自带的方法。该方法的定义如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var new_array = array.map(function callback(currentValue,index,arr), thisValue)</div><div class="line">callback  必选</div><div class="line">    currentValue    当前元素的值         必选</div><div class="line">    index           当前元素的索引       可选</div><div class="line">    arr             当前元素所属的数组    可选</div><div class="line">thisValue 可选，表示回调内部this的指向， 浏览器端不指定表示window</div></pre></td></tr></table></figure></p>
<p>这里传递currentValue表示当前数组中的值，所有的值都会被回调处理。比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3, 4];</div><div class="line">var newArr = arr.map(function(cv, i, ar)&#123;</div><div class="line">    console.log(ar);</div><div class="line">    return cv * 2;</div><div class="line">&#125;);</div><div class="line">console.log(newArr);    //打印：[ 2, 4, 6, 8 ]</div></pre></td></tr></table></figure></p>
<p>这里演示下<code>thisValue</code>的作用。如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Person(arr) &#123;</div><div class="line">    this.arr = arr;</div><div class="line">    this.show = function() &#123;</div><div class="line">        var newArr = arr.map(function(cv, i, ar) &#123;</div><div class="line">            console.log(this);   //这里打印的是Window对象</div><div class="line">            return cv * 2;</div><div class="line">        &#125;);</div><div class="line">        console.log(newArr);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p = new Person([1,2,3]);</div><div class="line">p.show();</div></pre></td></tr></table></figure></p>
<p>当然也可以指定为其他，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3, 4];</div><div class="line">var obj = &#123;</div><div class="line">    num: 23</div><div class="line">&#125;;</div><div class="line">var newArr = arr.map(function(cv, i, ar) &#123;</div><div class="line">    console.log(this);    //这里打印的就是obj对象</div><div class="line">    return cv * 2;</div><div class="line">&#125;, obj);</div><div class="line">console.log(newArr);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="说说parseInt"><a href="#说说parseInt" class="headerlink" title="说说parseInt"></a>说说parseInt</h4><p>官方说明如下:</p>
<blockquote>
<p>parseInt() 函数将给定的字符串以指定基数（radix/base）解析成为整数。并且是顶级函数，没有与任何对象关联</p>
</blockquote>
<p>语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">parseInt(string, radix);</div><div class="line">string</div><div class="line">    要被解析的值。如果参数不是一个字符串，则将其转换为字符串。字符串开头的空白符将会被忽略。</div><div class="line">radix</div><div class="line">    一个2到36之间的整数值，用于指定转换中采用的基数。比如参数&quot;10&quot;表示使用我们通常使用的十</div><div class="line">    进制数值系统。总是指定该参数可以消除阅读该代码时的困惑并且保证转换结果可预测。当忽略该</div><div class="line">    参数时，不同的实现环境可能产生不同的结果。</div></pre></td></tr></table></figure></p>
<p>parseInt 函数将第一个参数（字符串）解析并试图返回一个整数或者NaN（Not a Number）。如果结果不是NaN，那么返回值是把第一个参数看作是radix参数指定的进制下的数，然后把它转换成十进制的整数。例如：radix参数为10 将会把第一个参数看作是一个数的十进制表示，8 对应八进制，16 对应十六进制，等等。基数大于 10 时，用字母表中的字母来表示大于 9 的数字。例如十六进制中，使用 A 到 F。</p>
<p>如果 parseInt 遇到了不属于radix参数所指定的基数中的字符那么该字符和其后的字符都将被忽略。接着返回已经解析的整数部分。parseInt 将截取整数部分。开头和结尾的空白符允许存在，会被忽略。</p>
<p>在没有指定基数，或者基数为 0 的情况下，JavaScript 作如下处理：</p>
<blockquote>
<ul>
<li>如果字符串 string 以”0x”或者”0X”开头， 则基数是16 (16进制).</li>
<li>如果字符串 string 以”0”开头，基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。<br> ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出radix参数的值。</li>
<li>如果字符串 string 以其它任何值开头，则基数是10 (十进制)。</li>
<li>如果第一个字符不能被转换成数字，parseInt返回NaN。</li>
</ul>
</blockquote>
<p>这里其实解释也算是明白了，我们看几个具体的例子说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;5&apos;);       //打印5    默认以十进制为基数</div><div class="line">parseInt(&apos;5&apos;, 0);    //打印5    0表示以十进制为基数</div><div class="line">parseInt(&apos;5&apos;, 1);    //NaN     1不在基数范围内所以NaN</div><div class="line">parseInt(&apos;5&apos;, 2);    //NaN     2表示前面一个数字是二进制</div><div class="line">parseInt(&apos;5&apos;, 3);    //NaN     3表示前面一个数字是三进制</div><div class="line">parseInt(&apos;5&apos;, 4);    //NaN     4表示前面一个数字是四进制</div><div class="line">parseInt(&apos;5&apos;, 5);    //NaN     5表示前面一个数字是五进制</div><div class="line">parseInt(&apos;5&apos;, 6);    //5       6表示前面一个数字是六进制</div></pre></td></tr></table></figure></p>
<p>那么这样就可以理解为什么基数1-5都是NaN了，因为二进制到五进制下都没有5这个数字，最大是4这个数字，什么意思呢，就是二进制下最大数字是1，三进制下是2，四进制下是3，五进制下是4，六进制下是5。所以这里也就解释了为什么基数是6的时候可以返回5，因为5在六进制下就是5转换为十进制还是5，所以返回5。</p>
<p>这里再看个典型的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;12a&apos;);       //打印12 后面数字表示基数不解释</div><div class="line">parseInt(&apos;12a&apos;, 2);    //打印1</div><div class="line">parseInt(&apos;12a&apos;, 8);    //打印10</div><div class="line">parseInt(&apos;12a&apos;, 16);   //打印298</div></pre></td></tr></table></figure></p>
<p>看到这里如果上面的文字理解透彻了，这里应该也就可以理解为什么会是这个结果。</p>
<p>首先第一个<code>parseInt(&#39;12a&#39;)</code>表示基数是十进制，那么把字符串<code>12a</code>从左往右看就是<code>1, 2, a</code>。那么1在十进制下是1，2在十进制下是2，a在十进制下无法表示所以NaN。所以返回的就是1和2两个字符。这个时候可以根据进制转换进行换算。如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原始数据:  1  2</div><div class="line">数据下标:  1  0</div><div class="line">计算公式:  10^1*1 + 10^0*2</div><div class="line">计算结果:  10 + 2 = 12</div></pre></td></tr></table></figure></p>
<p>所以<code>parseInt(&#39;12a&#39;)</code>返回12。</p>
<blockquote>
<p>计算方法在<a href="/2016/12/08/进制之间转换/">进制转换</a>里面提过。</p>
</blockquote>
<p>以此我们分析第二个<code>parseInt(&#39;12a&#39;, 2)</code>。同样把字符串从左往右看，1在二进制下表示1，2在二进制下没法表示所以NaN，一旦遇到NaN就返回前面的数字，所以只有一个1，而1在十进制下也刚好是1。</p>
<p>第三个<code>parseInt(&#39;12a&#39;, 8)</code>。同样往右看，1在八进制下表示1，2在八进制下表示2，a在八进制下无法表示所以NaN。开始计算结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原始数据:  1  2</div><div class="line">数据下标:  1  0</div><div class="line">计算公式:  8^1*1 + 8^0*2</div><div class="line">计算结果:  8 + 2 = 10</div></pre></td></tr></table></figure></p>
<p>所以<code>parseInt(&#39;12a&#39;, 8)</code>返回10.</p>
<p>再看第四个<code>parseInt(&#39;12a&#39;, 16)</code>。往右看1在十六进制下表示1，2在十六进制下表示2，a在十六进制下表示10。计算如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原始数据:  1  2  10</div><div class="line">数据下标:  2  1  0</div><div class="line">计算公式:  16^2*1 + 16^1*2 + 16^0*10</div><div class="line">计算结果:  256 + 32 + 10 = 298</div></pre></td></tr></table></figure></p>
<p>所以<code>parseInt(&#39;12a&#39;, 16)</code>返回298。</p>
<hr>
<h4 id="计算结果"><a href="#计算结果" class="headerlink" title="计算结果"></a>计算结果</h4><p>到这里再回头看上面的文字说明就算是很清晰明了了。我们再回头看这个问题<code>[1, 2, 3].map(parseInt) 答案是多少？</code>。这下一分解就明白了。如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3].map(parseInt)</div><div class="line">var arr = [1, 2, 3];</div><div class="line"></div><div class="line">var paseInt = function(string, radix)&#123;</div><div class="line">    //上面的计算方式</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">arr.map(parseInt);</div><div class="line"></div><div class="line">分开计算:</div><div class="line">第一个1，基数是索引也就是0，相当于是parseInt(&apos;1&apos;, 0); 所以结果是1</div><div class="line">第一个2，基数是索引也就是1，相当于是parseInt(&apos;2&apos;, 1); 当基数是1的时候直接返回NaN</div><div class="line">第一个3，基数是索引也就是2，相当于是parseInt(&apos;3&apos;, 2); 3在二进制下无法表示所以NaN</div><div class="line"></div><div class="line">结果就是[1, NaN, NaN]</div></pre></td></tr></table></figure></p>
<hr>
<p>所以搞清楚问题的本质之后再看这个问题就非常简单了。那么<code>parseInt(1/0, 19)</code>等于多少呢？</p>
<p>答案会在下一篇文章里面说明</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题网络上很多人都问过，很多人也都给出解答了，搜索看了下发下很多答案都是一知半解。抱着透过问题看本质的心态仔细的看了下资料，总算是弄明白了最总的结果。并且弄明白了为什么会这样。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://mongoc.com/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://mongoc.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>进制之间转换</title>
    <link href="http://mongoc.com/2016/12/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>http://mongoc.com/2016/12/08/进制之间转换/</id>
    <published>2016-12-08T09:30:49.000Z</published>
    <updated>2016-12-09T09:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇文章想了想还是先介绍下进制之间的换算。这个东西是每个IT从业人员每天都接触的但是不一定每个人都说的清楚。首先我们从最常用的二进制说起。<br><a id="more"></a></p>
<hr>
<h4 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h4><p>现在需要把110101转为十进制，那么需要怎么转换呢？只需要如下进行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原始数据:  1  1  0  1  0  1   //我们把这个要转换的拉开，想象成数组</div><div class="line">数据下标:  5  4  3  2  1  0   //下面的是数字在数组中的下标，只是这个下标是倒着排列</div><div class="line">计算公式:  2^5*1 + 2^4*1 + 2^3*0 + 2^2*1 + 2^1*0 + 2^0*1  //这里的^5表示2的5次方，其他类推</div><div class="line">计算结果:  32 + 16 + 0 + 4 + 0 + 1 = 53    //2^0等于1</div></pre></td></tr></table></figure></p>
<blockquote>
<p>除0外，任何数字的0次方都等于1</p>
</blockquote>
<p>在JS中可以这样验证:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var num = 53;</div><div class="line">console.log(num.toString(&apos;2&apos;));    //110101</div></pre></td></tr></table></figure></p>
<p>这里如果是三进制转十进制就只是把2换成3就行了，比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原始数据:  1  1  0  1  0  1</div><div class="line">数据下标:  5  4  3  2  1  0</div><div class="line">计算公式:  3^5*1 + 3^4*1 + 3^3*0 + 3^2*1 + 3^1*0 + 3^0*1</div><div class="line">计算结果:  243 + 81 + 0 + 9 + 0 + 1 = 334    //3^0等于1</div></pre></td></tr></table></figure></p>
<p>同样的可以这样验证:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var num = 334;</div><div class="line">console.log(num.toString(&apos;3&apos;));    //110101</div></pre></td></tr></table></figure></p>
<p>同理这样可以适用10进制一下的转换。</p>
<hr>
<h4 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h4><p>比如我们把53转成二进制，可以这样理解:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">第一次: 53 / 2 = 26 -- 1   //53除2等于26余1</div><div class="line">第二次: 26 / 2 = 13 -- 0   //26除2等于13余0</div><div class="line">第三次: 13 / 2 = 6  -- 1   //13除2等于6余1</div><div class="line">第四次: 6  / 2 = 3  -- 0   //6除2等于3余0</div><div class="line">第五次: 3  / 2 = 1  -- 1   //3除2等于1余1</div><div class="line">然后把结果从后往前拼接，拼接最总结果和所有的余数: 1 + 1 + 0 + 1 + 0 + 1 = 110101</div></pre></td></tr></table></figure></p>
<p>三进制也是同理进行。</p>
<hr>
<h4 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h4><p>JS里面中是<code>0X</code>表示16进制，16进制从10开始用字母表示，因为每16的时候要进位所以十六进制最后一位字母是F。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  ...</div><div class="line">0  1  2  3  4  5  6  7  8  9  a   b   c   d   e   f   1f  2f  ...</div></pre></td></tr></table></figure></p>
<p>只要遇到a-f字母就把他想成对应的数字就行了，<br>比如要计算<code>2b3a</code>的十进制。计算方式和二进制一样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">原始数据:  2   b   3   a</div><div class="line">数据下标:  3   2   1   0</div><div class="line">替换数字:  2   11  3   10</div><div class="line">计算公式:  16^3*2 + 16^2*11 + 16^1*3 + 16^0*10</div><div class="line">计算结果:  8192 + 2816 + 48 + 10 = 11066    //2^0等于1</div></pre></td></tr></table></figure></p>
<p>验证下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = 11066;</div><div class="line">a.toString(&apos;16&apos;);  //2b3a</div></pre></td></tr></table></figure></p>
<p>计算的思路都是一致的。记住思路就可以了。</p>
<p>至于十进制转十六进制道理也都是一样的。</p>
<p>在JS中如果想把二进制转为十进制可以使用<code>parseInt</code>， 如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;110101&apos;, 2)   //输出53  二进制转十进制</div><div class="line">parseInt(&apos;67&apos;, 8)       //输出55  八进制转十进制</div><div class="line">parseInt(&apos;aa&apos;, 16)      //输出170 十六进制转十进制</div><div class="line">parseInt(&apos;69&apos;, 8)       //输出6   猜猜为什么</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一篇文章想了想还是先介绍下进制之间的换算。这个东西是每个IT从业人员每天都接触的但是不一定每个人都说的清楚。首先我们从最常用的二进制说起。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://mongoc.com/tags/JavaScript/"/>
    
      <category term="基础" scheme="http://mongoc.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mongoc.com/2016/12/08/hello-world/"/>
    <id>http://mongoc.com/2016/12/08/hello-world/</id>
    <published>2016-12-08T06:59:31.000Z</published>
    <updated>2016-12-08T11:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://mongoc.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
